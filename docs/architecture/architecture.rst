============
Architecture
============


Overview
========

The following picture illustrates the architecture of |Adama|:

.. only:: html

   .. figure:: workers.svg
      :align: center
      :width: 50 %

.. only:: latex

   .. figure:: workers.pdf
      :align: center
      :width: 95 %

The main components are:

- |Adama| itself is a Python application running over an Apache web
  server, providing the REST endpoints and business logic. (see
  :ref:`api`).

- A data store (Redis) collects a registry of adapters.

- A task queue (RabbitMQ) distributes work to the adapters for each
  request to the ``query`` endpoint.

- The workers are Docker containers that get created through the
  ``register`` endpoint, and get started and shutdown under Adama
  command, depending on the load of the ``query`` endpoint.  The
  workers are continuously consuming work from the task queue.

- The *user module* in the picture is the adapter provided by the
  developer at registration time (see :ref:`adapter_api`).

- The user module, data sources, and 3rd party protocol (colored blue
  in the picture) specify the parts under control of the developer
  role (see :ref:`developer_role`).

- Elasticsearch intercepts objects generated by the queries and
  creates an aggregated database that allows extra capabalities for
  searching and analyzing the data sources.  Data sources can
  opt-in or opt-out of this functionality at any time.


.. _api:

API
===

.. warning:: This section is in flux. The API will change before a
             stable release.

In what follows, assume that ``$ADAMA`` is the base url of the Adama
services.

The resource ``$ADAMA/register`` accepts a ``GET`` and ``POST``
request.  The ``GET`` verb returns a list of registered adapters in
the form:

.. code-block:: json

    {
      "identifier": "foo_v0.1",
      "language": "python",
      "name": "foo",
      "url": "http://example.com",
      "version": "0.1",
      "workers": [
        "ad89eefd01ca4648dc388dd12b95816cc24fe938ca801bd938ef982fa057a489",
        "7ec01fefe8c8a54d92a773569e0dc0b38be8b3a9bbdea7a16da05c5a800117ad",
        "ca88c73a13c17704e348eca468c101c784654dbe90b1156846e34507d0cccd6a",
        "7f3fbb1faadd7493c349dd316ad3d1dcf8775b8851dbf0e9111b00bf64c03612"
      ]
    }

The identifier is unique and can be used in the queries to refer to
the service provided by this adapter.  The ``workers`` field contains
internal information about the workers currently running to attend
this adapter (it may be removed from the public API in the
future).

.. _register_post:

The ``POST`` verb allows to register a new adapter.  It accepts the
parameters described below.  The type of the parameter and whether
they are mandatory or optional is described besides the paramter name.

``name`` [form, mandatory]
    Name of the service provided by this adapter (together with the
    version they must form a unique identifier)

``version`` [form, mandatory]
    Version of the service.

``url`` [form, mandatory]
   URL of the data source.  The network access for the adapter may be
   restricted to access only this URL.

``description`` [form, mandatory]
   Human readable description of the service.

``requirements`` [form, optional]
   Comma separated list of third party modules to be installed inside
   the workers.  They should be accessible in the standard package
   repository for the language bein used (i.e., ``pypi`` for Python,
   ``rubygems`` for Ruby, etc.).

``code`` [file, mandatory]
   The user's code for the adapter. See
   :ref:`adapter_api` for its API and requirements.  The code can be
   provided in a single file, or in a tarball or zip compressed
   archive.  The type is detected automatically.

Workers are started immediately after registration.  The response is
the standard (``status``, ``message``, ``result``) triple (see Agave).

The verbs ``PUT`` and ``DELETE`` will be implemented in the future to
allow administration of already registered adapters.

The resource ``$ADAMA/query`` accepts ``POST`` requests to perform
queries to a selected list of services.  The parameter is a JSON
encoded in the body with the schema:

.. code-block:: json

   {
     "serviceName": "foo_v0.1",
     "query": "...Araport Language query..."
   }

The ``serviceName`` field can also be a list of multiple services. The
query will be delivered to all of them, and responses will be
collected together.  See :ref:`araport_language` for the schema of the
queries.


.. _adapter_api:


Adapter API
===========

.. warning:: This section is in flux. The API will change before a
             stable release.


.. |Adama| replace:: *Adama*
